<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redis on 不一样的天空</title>
    <link>https://feilengcui008.github.io/tags/redis/</link>
    <description>Recent content in Redis on 不一样的天空</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 29 May 2016 21:05:05 +0800</lastBuildDate>
    
	<atom:link href="https://feilengcui008.github.io/tags/redis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Redis源码分析</title>
      <link>https://feilengcui008.github.io/post/redis%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 29 May 2016 21:05:05 +0800</pubDate>
      
      <guid>https://feilengcui008.github.io/post/redis%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>主要记录Redis相关的一些源码分析，不定时更新。
目前已添加的内容：
 Redis之eventloop Redis数据结构之dict  Redis之eventloop 简介 Redis的eventloop实现也是比较平常的，主要关注文件描述符和timer相关事件，而且timer只是简单用一个单链表(O(n)遍历寻找最近触发的时间)实现。
流程  主要在initServer(server.c)中初始化整个eventloop相关的数据结构与回调  // 注册系统timer事件 if (aeCreateTimeEvent(server.el, 1, serverCron, NULL, NULL) == AE_ERR) { serverPanic(&amp;quot;Can&#39;t create event loop timers.&amp;quot;); exit(1); } // 注册poll fd的接收客户端连接的读事件 for (j = 0; j &amp;lt; server.ipfd_count; j++) { if (aeCreateFileEvent(server.el, server.ipfd[j], AE_READABLE, acceptTcpHandler,NULL) == AE_ERR) { serverPanic( &amp;quot;Unrecoverable error creating server.ipfd file event.&amp;quot;); } } // 同上 if (server.sofd &amp;gt; 0 &amp;amp;&amp;amp; aeCreateFileEvent(server.el,server.sofd,AE_READABLE, acceptUnixHandler,NULL) == AE_ERR) serverPanic(&amp;quot;Unrecoverable error creating server.</description>
    </item>
    
  </channel>
</rss>